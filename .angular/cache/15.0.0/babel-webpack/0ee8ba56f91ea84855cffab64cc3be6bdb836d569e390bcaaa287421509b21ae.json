{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid'; // Use UUID for unique ID generation\nlet MainPageComponent = class MainPageComponent {\n  constructor(postService) {\n    this.postService = postService;\n    this.posts = [];\n    // posts: string[] = [\n    //   \"I have a new idea!!!!!!!!!\",\n    //   \"A new idea that I would love to see implemented is a self-washing station in Qatar.\",\n    //   \"An idea that I was thinking of implementing is self-driving car driving schools.\"\n    // ];\n    this.isModalOpen = false;\n    this.showSuccessPopup = false; // Controls the success popup\n    this.newPostTitle = '';\n    this.newPostText = '';\n    this.selectedTag = '';\n    this.newPost = {\n      id: '',\n      username: 'User1',\n      description: '',\n      tags: {\n        tech: false,\n        beauty: false,\n        sports: false,\n        entertainment: false,\n        others: false\n      }\n    };\n  }\n  openNewPostModal() {\n    this.isModalOpen = true;\n  }\n  closeNewPostModal() {\n    this.isModalOpen = false;\n    this.newPostTitle = '';\n    this.newPostText = '';\n    this.selectedTag = '';\n  }\n  toggleActiveTag(event) {\n    const target = event.target;\n    target.classList.toggle('active'); // Toggle the active class on the clicked button\n  }\n\n  postNewIdea() {\n    // Check if all required fields are filled\n    const isTagSelected = Object.values(this.newPost.tags).some(value => value);\n    const isDescriptionFilled = this.newPost.description.trim().length > 0;\n    if (!isTagSelected || !isDescriptionFilled) {\n      alert('Please fill in all fields before posting.');\n      return;\n    }\n    const newPost = {\n      id: uuidv4(),\n      title: this.newPostTitle,\n      text: this.newPostText,\n      tag: this.selectedTag\n    };\n    // Save the post using the service\n    this.postService.savePost(newPost).subscribe(() => {\n      // Add the post to the local list after successful save\n      this.posts.push(newPost);\n      this.closeNewPostModal();\n    });\n  }\n};\nMainPageComponent = __decorate([Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})], MainPageComponent);\nexport { MainPageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAO9B,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAiB5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAf/B,UAAK,GAA+D,EAAE;IAEtE;IACA;IACA;IACA;IACA;IAEA,gBAAW,GAAG,KAAK;IACnB,qBAAgB,GAAG,KAAK,CAAC,CAAC;IAE1B,iBAAY,GAAG,EAAE;IACjB,gBAAW,GAAG,EAAE;IAChB,gBAAW,GAAG,EAAE;IAoBhB,YAAO,GAAG;MACRC,EAAE,EAAE,EAAE;MACNC,QAAQ,EAAE,OAAO;MACjBC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;QACJC,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE,KAAK;QACbC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE,KAAK;QACpBC,MAAM,EAAE;;KAEX;EA7B8C;EAE/CC,gBAAgB;IACd,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,iBAAiB;IACf,IAAI,CAACD,WAAW,GAAG,KAAK;IACxB,IAAI,CAACE,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,WAAW,GAAG,EAAE;EACvB;EAEFC,eAAe,CAACC,KAAiB;IAC/B,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAqB;IAC1CA,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;EACrC;;EAgBAC,WAAW;IACT;IACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,OAAO,CAACrB,IAAI,CAAC,CAACsB,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAAC;IAC7E,MAAMC,mBAAmB,GAAG,IAAI,CAACH,OAAO,CAACtB,WAAW,CAAC0B,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC;IAEtE,IAAI,CAACR,aAAa,IAAI,CAACM,mBAAmB,EAAE;MAC1CG,KAAK,CAAC,2CAA2C,CAAC;MAClD;;IAGA,MAAMN,OAAO,GAAG;MACdxB,EAAE,EAAEJ,MAAM,EAAE;MACZmC,KAAK,EAAE,IAAI,CAACnB,YAAY;MACxBoB,IAAI,EAAE,IAAI,CAACnB,WAAW;MACtBoB,GAAG,EAAE,IAAI,CAACnB;KACX;IAED;IACA,IAAI,CAACf,WAAW,CAACmC,QAAQ,CAACV,OAAO,CAAC,CAACW,SAAS,CAAC,MAAK;MAChD;MACA,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,OAAO,CAAC;MACxB,IAAI,CAACb,iBAAiB,EAAE;IAC1B,CAAC,CAAC;EACJ;CAED;AA1EYd,iBAAiB,eAL7BH,SAAS,CAAC;EACT4C,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW3C,iBAAiB,CA0E7B;SA1EYA,iBAAiB","names":["Component","v4","uuidv4","MainPageComponent","constructor","postService","id","username","description","tags","tech","beauty","sports","entertainment","others","openNewPostModal","isModalOpen","closeNewPostModal","newPostTitle","newPostText","selectedTag","toggleActiveTag","event","target","classList","toggle","postNewIdea","isTagSelected","Object","values","newPost","some","value","isDescriptionFilled","trim","length","alert","title","text","tag","savePost","subscribe","posts","push","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\malak\\Documents\\OneDrive\\uni\\cmuq\\UBS-ideasphere\\ideasphere\\src\\app\\main-page\\main-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\ndeclare module 'uuid';\nimport { PostService } from './post.service'; // Service to handle database operations\nimport { v4 as uuidv4 } from 'uuid'; // Use UUID for unique ID generation\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})\nexport class MainPageComponent {\n\n  posts: { id: string; title: string; text: string; tag: string }[] = [];\n\n  // posts: string[] = [\n  //   \"I have a new idea!!!!!!!!!\",\n  //   \"A new idea that I would love to see implemented is a self-washing station in Qatar.\",\n  //   \"An idea that I was thinking of implementing is self-driving car driving schools.\"\n  // ];\n\n  isModalOpen = false;\n  showSuccessPopup = false; // Controls the success popup\n\n  newPostTitle = '';\n  newPostText = '';\n  selectedTag = '';\n\n  constructor(private postService: PostService) {}\n\n  openNewPostModal() {\n    this.isModalOpen = true;\n  }\n\n  closeNewPostModal() {\n    this.isModalOpen = false;\n    this.newPostTitle = '';\n    this.newPostText = '';\n    this.selectedTag = '';\n  }\n\ntoggleActiveTag(event: MouseEvent): void {\n  const target = event.target as HTMLElement;\n  target.classList.toggle('active'); // Toggle the active class on the clicked button\n}\n\n  newPost = {\n    id: '',\n    username: 'User1', // Replace this with the actual logged-in user's username\n    description: '',\n    tags: {\n      tech: false,\n      beauty: false,\n      sports: false,\n      entertainment: false,\n      others: false,\n    },\n  };\n \n\npostNewIdea(): void {\n  // Check if all required fields are filled\n  const isTagSelected = Object.values(this.newPost.tags).some((value) => value);\n  const isDescriptionFilled = this.newPost.description.trim().length > 0;\n\n  if (!isTagSelected || !isDescriptionFilled) {\n    alert('Please fill in all fields before posting.');\n    return;\n  }\n\n    const newPost = {\n      id: uuidv4(),\n      title: this.newPostTitle,\n      text: this.newPostText,\n      tag: this.selectedTag\n    };\n\n    // Save the post using the service\n    this.postService.savePost(newPost).subscribe(() => {\n      // Add the post to the local list after successful save\n      this.posts.push(newPost);\n      this.closeNewPostModal();\n    });\n  }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}