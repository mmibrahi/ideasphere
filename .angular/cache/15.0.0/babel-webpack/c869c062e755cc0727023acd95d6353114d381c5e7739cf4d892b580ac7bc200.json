{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet MainPageComponent = class MainPageComponent {\n  constructor(ideaService) {\n    this.ideaService = ideaService;\n    this.ideas = [];\n    this.isModalOpen = false; // Modal state\n    this.showSuccessPopup = false; // Controls the success popup\n    this.newIdeaTitle = ''; // Holds the new idea title\n    this.newIdeaContent = ''; // Holds the new idea content\n    this.selectedTagname = ''; // Holds the selected tagname\n  }\n\n  openNewIdeaModal() {\n    this.isModalOpen = true;\n  }\n  closeNewIdeaModal() {\n    this.isModalOpen = false;\n    this.newIdeaTitle = '';\n    this.newIdeaContent = '';\n    this.selectedTagname = '';\n  }\n  toggleActiveTag(event) {\n    const target = event.target;\n    target.classList.toggle('active');\n  }\n  selectTag(tag) {\n    this.selectedTagname = tag; // Store the selected tag\n  }\n\n  postNewIdea() {\n    const isTagSelected = this.selectedTagname.trim().length > 0;\n    const isContentFilled = this.newIdeaContent.trim().length > 0;\n    if (!isTagSelected || !isContentFilled) {\n      alert('Please select a tag and fill in the content before posting.');\n      return;\n    }\n    const newIdea = {\n      title: '',\n      content: this.newIdeaContent,\n      tagname: this.selectedTagname\n    };\n    this.ideaService.saveIdea(newIdea).subscribe({\n      next: () => {\n        this.ideas.push(newIdea);\n        this.closeNewIdeaModal();\n        this.showSuccessPopup = true;\n        // Hides the popup after 2 seconds\n        setTimeout(() => this.showSuccessPopup = false, 2000);\n      },\n      error: err => {\n        console.error('Error saving idea:', err);\n        alert('An error occurred while saving your idea. Please try again.');\n      }\n    });\n  }\n  ngOnInit() {\n    this.loadIdeas();\n  }\n  loadIdeas() {\n    this.ideaService.getIdeas().subscribe(data => {\n      this.ideas = data;\n    });\n  }\n};\nMainPageComponent = __decorate([Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})], MainPageComponent);\nexport { MainPageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAiB,eAAe;AAU3C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAW5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAT/B,UAAK,GAAuE,EAAE;IAE9E,gBAAW,GAAG,KAAK,CAAC,CAAC;IACrB,qBAAgB,GAAG,KAAK,CAAC,CAAC;IAE1B,iBAAY,GAAG,EAAE,CAAC,CAAC;IACnB,mBAAc,GAAG,EAAE,CAAC,CAAC;IACrB,oBAAe,GAAG,EAAE,CAAC,CAAC;EAEyB;;EAE/CC,gBAAgB;IACd,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,iBAAiB;IACf,IAAI,CAACD,WAAW,GAAG,KAAK;IACxB,IAAI,CAACE,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,eAAe,GAAG,EAAE;EAC3B;EAEAC,eAAe,CAACC,KAAiB;IAC/B,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAqB;IAC1CA,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;EACnC;EAEAC,SAAS,CAACC,GAAW;IACnB,IAAI,CAACP,eAAe,GAAGO,GAAG,CAAC,CAAC;EAC9B;;EAEAC,WAAW;IACT,MAAMC,aAAa,GAAG,IAAI,CAACT,eAAe,CAACU,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC;IAC5D,MAAMC,eAAe,GAAG,IAAI,CAACb,cAAc,CAACW,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC;IAE7D,IAAI,CAACF,aAAa,IAAI,CAACG,eAAe,EAAE;MACtCC,KAAK,CAAC,6DAA6D,CAAC;MACpE;;IAGF,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,IAAI,CAACjB,cAAc;MAC5BkB,OAAO,EAAE,IAAI,CAACjB;KACf;IAED,IAAI,CAACN,WAAW,CAACwB,QAAQ,CAACJ,OAAO,CAAC,CAACK,SAAS,CAAC;MAC3CC,IAAI,EAAE,MAAK;QACT,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,OAAO,CAAC;QACxB,IAAI,CAACjB,iBAAiB,EAAE;QACxB,IAAI,CAAC0B,gBAAgB,GAAG,IAAI;QAE5B;QACAC,UAAU,CAAC,MAAO,IAAI,CAACD,gBAAgB,GAAG,KAAM,EAAE,IAAI,CAAC;MACzD,CAAC;MACDE,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEC,GAAG,CAAC;QACxCb,KAAK,CAAC,6DAA6D,CAAC;MACtE;KACD,CAAC;EACJ;EAEAe,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAAS;IACP,IAAI,CAACnC,WAAW,CAACoC,QAAQ,EAAE,CAACX,SAAS,CAAEY,IAAI,IAAI;MAC7C,IAAI,CAACV,KAAK,GAAGU,IAAI;IACnB,CAAC,CAAC;EACJ;CACD;AAzEYvC,iBAAiB,eAL7BD,SAAS,CAAC;EACTyC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW1C,iBAAiB,CAyE7B;SAzEYA,iBAAiB","names":["Component","MainPageComponent","constructor","ideaService","openNewIdeaModal","isModalOpen","closeNewIdeaModal","newIdeaTitle","newIdeaContent","selectedTagname","toggleActiveTag","event","target","classList","toggle","selectTag","tag","postNewIdea","isTagSelected","trim","length","isContentFilled","alert","newIdea","title","content","tagname","saveIdea","subscribe","next","ideas","push","showSuccessPopup","setTimeout","error","err","console","ngOnInit","loadIdeas","getIdeas","data","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\malak\\Documents\\OneDrive\\uni\\cmuq\\UBS-ideasphere\\ideasphere\\src\\app\\main-page\\main-page.component.ts"],"sourcesContent":["import { Component , OnInit } from '@angular/core';\n// import ideaservice\nimport { IdeaService } from '../Service/idea.service';\nimport { v4 as uuidv4 } from 'uuid'; // Use UUID for unique ID generation\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})\nexport class MainPageComponent implements OnInit {\n\n  ideas: { id?: number; title: string; content: string; tagname: string }[] = [];\n\n  isModalOpen = false; // Modal state\n  showSuccessPopup = false; // Controls the success popup\n\n  newIdeaTitle = ''; // Holds the new idea title\n  newIdeaContent = ''; // Holds the new idea content\n  selectedTagname = ''; // Holds the selected tagname\n\n  constructor(private ideaService: IdeaService) {}\n\n  openNewIdeaModal() {\n    this.isModalOpen = true;\n  }\n\n  closeNewIdeaModal() {\n    this.isModalOpen = false;\n    this.newIdeaTitle = '';\n    this.newIdeaContent = '';\n    this.selectedTagname = '';\n  }\n\n  toggleActiveTag(event: MouseEvent): void {\n    const target = event.target as HTMLElement;\n    target.classList.toggle('active'); \n  }\n\n  selectTag(tag: string): void {\n    this.selectedTagname = tag; // Store the selected tag\n  }\n  \n  postNewIdea(): void {\n    const isTagSelected = this.selectedTagname.trim().length > 0;\n    const isContentFilled = this.newIdeaContent.trim().length > 0;\n  \n    if (!isTagSelected || !isContentFilled) {\n      alert('Please select a tag and fill in the content before posting.');\n      return;\n    }\n  \n    const newIdea = {\n      title: '', // Optional if not needed\n      content: this.newIdeaContent,\n      tagname: this.selectedTagname,\n    };\n  \n    this.ideaService.saveIdea(newIdea).subscribe({\n      next: () => {\n        this.ideas.push(newIdea);\n        this.closeNewIdeaModal();\n        this.showSuccessPopup = true;\n  \n        // Hides the popup after 2 seconds\n        setTimeout(() => (this.showSuccessPopup = false), 2000);\n      },\n      error: (err) => {\n        console.error('Error saving idea:', err);\n        alert('An error occurred while saving your idea. Please try again.');\n      },\n    });\n  }\n  \n  ngOnInit(): void {\n    this.loadIdeas();\n  }\n\n  loadIdeas(): void {\n    this.ideaService.getIdeas().subscribe((data) => {\n      this.ideas = data;\n    });\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}