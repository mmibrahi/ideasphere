{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\nimport { FormControl, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, service, router) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.router = router;\n    this.loginStatus = true;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required)\n    });\n  }\n  get username() {\n    return this.loginForm.get('username');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  login() {\n    // this.service.login(this.loginForm.value).subscribe(\n    //   (result: string) => {\n    //     console.log(result);\n    //     alert(result); // Displays \"Successfully logged in\" on success\n    //     this.router.navigate(['dashboard']);\n    //   },\n    //   error => {\n    //     console.log(error);\n    //     this.loginStatus = false;\n    //   }\n    // )\n    this.router.navigate(['main-page']).then(success => {\n      if (success) {\n        console.log('Navigation successful');\n      } else {\n        console.error('Navigation failed');\n      }\n    }, error => {\n      console.error('Error during navigation:', error);\n    });\n    // console.log('Redirecting to main page without authentication...');\n    // this.router.navigate(['mainpage']);\n  }\n};\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD;AACA,SAAiCC,WAAW,EAAEC,UAAU,QAAO,gBAAgB;AASxE,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,WAAwB,EAAUC,OAA2B,EAAUC,MAAc;IAArF,gBAAW,GAAXF,WAAW;IAAuB,YAAO,GAAPC,OAAO;IAA8B,WAAM,GAANC,MAAM;IAFjG,gBAAW,GAAG,IAAI;EAE0F;EAE5GC,QAAQ;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACU,QAAQ,CAAC;MAClDC,QAAQ,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACU,QAAQ;KAClD,CAAC;EACN;EAEA,IAAID,QAAQ;IACV,OAAO,IAAI,CAACF,SAAS,CAACK,GAAG,CAAC,UAAU,CAAC;EACvC;EACA,IAAID,QAAQ;IACV,OAAO,IAAI,CAACJ,SAAS,CAACK,GAAG,CAAC,UAAU,CAAC;EACvC;EAEAC,KAAK;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAACC,IAAI,CACtCC,OAAO,IAAG;MACR,IAAIA,OAAO,EAAE;QACXC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;OACrC,MAAM;QACLD,OAAO,CAACE,KAAK,CAAC,mBAAmB,CAAC;;IAEtC,CAAC,EACDA,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CACF;IACD;IACA;EAEF;CA+BD;;AA9EYlB,cAAc,eAL1BH,SAAS,CAAC;EACTsB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWrB,cAAc,CA8E1B;SA9EYA,cAAc","names":["Component","FormControl","Validators","LoginComponent","constructor","formBuilder","service","router","ngOnInit","loginForm","group","username","required","password","get","login","navigate","then","success","console","log","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\malak\\Documents\\OneDrive\\uni\\cmuq\\UBS-ideasphere\\ideasphere\\src\\app\\admin\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n// import { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup, FormControl, Validators} from '@angular/forms';\r\nimport { SignupLoginService } from '../signup-login.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup;\r\n  loginStatus = true;\r\n\r\n  constructor(private formBuilder: FormBuilder, private service: SignupLoginService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n      this.loginForm = this.formBuilder.group({\r\n        username: new FormControl('', Validators.required),\r\n        password: new FormControl('', Validators.required)\r\n      })\r\n  }\r\n\r\n  get username(){\r\n    return this.loginForm.get('username');\r\n  }\r\n  get password(){\r\n    return this.loginForm.get('password');\r\n  }\r\n\r\n  login(){\r\n    // this.service.login(this.loginForm.value).subscribe(\r\n    //   (result: string) => {\r\n    //     console.log(result);\r\n    //     alert(result); // Displays \"Successfully logged in\" on success\r\n    //     this.router.navigate(['dashboard']);\r\n    //   },\r\n    //   error => {\r\n    //     console.log(error);\r\n    //     this.loginStatus = false;\r\n    //   }\r\n    // )\r\n    this.router.navigate(['main-page']).then(\r\n      success => {\r\n        if (success) {\r\n          console.log('Navigation successful');\r\n        } else {\r\n          console.error('Navigation failed');\r\n        }\r\n      },\r\n      error => {\r\n        console.error('Error during navigation:', error);\r\n      }\r\n    );\r\n    // console.log('Redirecting to main page without authentication...');\r\n    // this.router.navigate(['mainpage']);\r\n    \r\n  }\r\n  \r\n\r\n  // login(){\r\n  //   this.service.login(this.loginForm).subscribe(\r\n  \r\n  //     results => {\r\n  //       console.log(results);\r\n  //       if(results){\r\n  //         //navigate to dashboard\r\n  //         this.router.navigate(['dashboard']);\r\n  //         var value = 'Basic ' + btoa(this.loginForm.value.username + ':' + this.loginForm.value.password);\r\n  //         sessionStorage.setItem('loginCredentials', value);\r\n  //       }\r\n  //       else{\r\n  //         this.loginStatus = false;\r\n  //         this.loginForm.get('password').setValue(\"\");\r\n  //         this.loginForm.get('password').markAsUntouched();\r\n  //       }\r\n  //    },\r\n  //       error => {\r\n  //       console.log(error);\r\n  //       this.loginStatus = false\r\n  //       this.loginForm.get('password').setValue(\"\");\r\n  //       this.loginForm.get('password').markAsUntouched();\r\n\r\n  //     }\r\n  //   )\r\n  // }\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}